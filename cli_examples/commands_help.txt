
1. Start dynamodb local

java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb


2. Generate expected json format for different actions

aws dynamodb create-table --generate-cli-skeleton

3. List tables
aws dynamodb list-tables --endpoint-url http://localhost:8000

4. Create tables

aws dynamodb create-table --cli-input-json file://"C:/SPB_Data/AWS-Training-dynamodb/cli_samples/createMusicTable.json" --endpoint-url http://localhost:8000

5. put item

aws dynamodb put-item --table-name MusicCollection --item file://"C:/SPB_Data/AWS-Training-dynamodb/cli_samples/firstData.json" --endpoint-url http://localhost:8000

6. get item 

aws dynamodb get-item --table-name MusicCollection --key file://"C:/SPB_Data/AWS-Training-dynamodb/cli_samples/firstGet.json" --endpoint-url http://localhost:8000

7. update item (need checking)

aws dynamodb update-item --table-name Music --key file://"D:/dynamodb/cli_samples/firstGet.json" --update-expression "SET :year = :y" --expression-attribute-values file://"D:/dynamodb/cli_samples/updateValues.json"   --expression-attribute-names '{":year":"Yearval"}'
aws dynamodb update-item --table-name MusicCollection --key file://"C:/SPB_Data/AWS-Training-dynamodb/cli_samples/firstGet.json" --update-expression 'SET Yearval = "1987"' --endpoint-url http://localhost:8000

8. delete item

aws dynamodb delete-item --table-name MusicCollection --key file://"C:/SPB_Data/AWS-Training-dynamodb/cli_samples/secondGet.json" --endpoint-url http://localhost:8000

9. delete table

aws dynamodb delete-table --table-name MusicCollection  --endpoint-url http://localhost:8000

10. Add secondary index

aws dynamodb --region=eu-west-1 create-table --endpoint-url http://localhost:8000 --table-name mytable 
--attribute-definitions AttributeName=key,AttributeType=S AttributeName=assignedTo,AttributeType=S AttributeName=roles,AttributeType=S 
--key-schema AttributeName=key,KeyType=HASH AttributeName=assignedTo,KeyType=RANGE 
--provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=10
 --global-secondary-indexes IndexName=Index,KeySchema=["{AttributeName=assignedTo,KeyType=HASH}","{AttributeName=roles,KeyType=RANGE}"],Projection="{ProjectionType=INCLUDE ,NonKeyAttributes=["key"]}",ProvisionedThroughput="{ReadCapacityUnits=10,WriteCapacityUnits=10}"

11. scan
 aws dynamodb scan --table-name MusicCollection --endpoint-url http://localhost:8000

12. scan with item limit
aws dynamodb scan --table-name MusicCollection --max-items 1 --endpoint-url http://localhost:8000

13. scan with filter (used --expression-attribute-values)

aws dynamodb scan --table-name MusicCollection --filter-expression "Artist = :a" --expression-attribute-values file://C:/SPB_Data/AWS-Training-dynamodb/cli_samples/exprValue.json --endpoint-url http://localhost:8000


14. query (will always have --key-condition-expression)

aws dynamodb query --table-name MusicCollection  --key-condition-expression "Artist = :a" --expression-attribute-values file://C:/SPB_Data/AWS-Training-dynamodb/cli_samples/exprValue.json --endpoint-url http://localhost:8000

15. wait till table exists
 aws dynamodb wait table-exists --table-name MusicCollection --endpoint-url http://localhost:8000

16. wait till table does not exist
 aws dynamodb wait table-not-exists --table-name MusicCollection --endpoint-url http://localhost:8000


17. batch-write-item

aws dynamodb batch-write-item --request-items file://ProductCatalog.json
























